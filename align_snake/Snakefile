########################################################################################################
# align_snake
#   Snakemake workflow to use STARsolo to align and quantify 10x Chromium datasets
#   Written by David W. McKellar
########################################################################################################

import pandas as pd

########################################################################################################
# Config file
########################################################################################################
configfile:'config.yaml'
########################################################################################################
# Directories and locations
########################################################################################################
# DATADIR = config['DATADIR']
TMPDIR = config['TMPDIR'] # temporary files
OUTDIR = config['OUTDIR'] # outputs for STAR alignment, etc
REFDIR = config['REFDIR'] # Output for reference genomes

########################################################################################################
# Metadata
########################################################################################################
META = pd.read_csv(config['SAMPLE_SHEET'], na_filter=False)
META = META[list(META['include'])] #remove undesired samples ('include'==False)

# Filter for samples with fastq's available
# META = META[list(META['file.format']=="bam")]
META = META[list(META['tissue']=="muscle")]

# META = META.iloc[1:4,:] # subset to only download certain samples...

SRR = list(META['SRR.accession'])
for i in range(0,len(SRR)):
    SRR[i] = SRR[i].split(';')
SRR = list(chain(*SRR))

#~~~~ TODO
SAMPLES = META['GSM.accession']

# R1_FQS = dict(SAMPLES, list(zip()))
# R2_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R2'])))

########################################################################################################
# Reference genome info
########################################################################################################
SPECIES = list(META['species']) #all lowercase and underscores (no spaces!)
SPECIES = [x.lower() for x in SPECIES]
SPECIES = [x.replace(' ', '_') for x in SPECIES]
SPECIES = pd.unique(SPECIES)
# print(SPECIES)

########################################################################################################
# Executables
########################################################################################################
STAR_EXEC = config['STAR_EXEC']
GGET_EXEC = config['GGET_EXEC']
#TODO- samtools, fastqc, etc

########################################################################################################
rule all:
    input:
        expand('{REFDIR}/{SPECIES}/SAindex', REFDIR=REFDIR, SPECIES=SPECIES) # Reference genomes
        # expand('{OUTDIR}/{sample}/Solo.out/Gene/filtered/matrix.mtx', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        # expand('{OUTDIR}/{sample}/Aligned.sortedByCoord.dedup.out.bam.bai', OUTDIR=config['OUTDIR'], sample=SAMPLES), # umi_tools deduplicated .bam **Note** this is super slow!! Only uncomment if NEEDED
        # expand('{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam.bai', OUTDIR=config['OUTDIR'], sample=SAMPLES), #non-deduplicated .bam; used for saturation estimation
        # expand('{OUTDIR}/{sample}/preTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # raw R2 fastQC results
        # expand('{OUTDIR}/{sample}/postTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # adapter/polyA/ployG-trimmed R2 fastQC results
        # expand('{OUTDIR}/{sample}/postTrim_FastQC_R2_lengthFiltered', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        # expand('{OUTDIR}/{sample}/qualimap_out/qualimapReport.html', OUTDIR=config['OUTDIR'], sample=SAMPLES), # alignment QC qith qualimap plotgardener)

        # expand('{OUTDIR}/{sample}/Unmapped_fastqc_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), #fastQC results for unmapped reads
        # expand('{OUTDIR}/{sample}/Solo.out/Gene/filtered/matrix.mtx.gz', OUTDIR=config['OUTDIR'], sample=SAMPLES), # count mats


#############################################
## Generate references w/ `gget`
#############################################
# Unzip the whitelist file if it hasn't been done yet
#TODO: change to download from somehwere? maybe look for a wget link?
#TODO: include this in `resources/chemistry_sheet.csv`
# rule gunzipWhitelists:
#     input:
#         config['CB_WHITELIST']+'.gz'
#     output:
#         config['CB_WHITELIST']
#     shell:
#         """
#         gunzip {input}
#         """

# Build reference genomes for STARsolo alignment/quantification
#TODO: parallelize across species!
rule build_refs:
    output:
        REF_METADATA = expand("{REFDIR}/{SPECIES}/metadata.json", REFDIR=config['REFDIR'], SPECIES=SPECIES),
        REF = expand("{REFDIR}/{SPECIES}/SAindex", REFDIR=config['REFDIR'], SPECIES=SPECIES) # Reference genomes
    threads:
        config['CORES_HI']
    run:
        for S in SPECIES:
            print(f"Downloading genome sequence and annotations for {S} to {REFDIR}/{S}")
            shell(
                f"""
                mkdir -p {REFDIR}/{S}
                cd {REFDIR}/{S}

                {GGET_EXEC} ref \
                --out {REFDIR}/{S}/metadata.json \
                --which gtf,dna \
                --download \
                {S}

                gunzip {REFDIR}/{S}/*.gz
                """
            )

            # Build reference for STAR
            print(f"Building STAR reference for {S}...\n")
            shell(
                f"""
                {STAR_EXEC} \
                --runThreadN {threads} \
                --runMode genomeGenerate \
                --genomeDir {REFDIR}/{S}/STAR \
                --genomeFastaFiles $(ls -t {REFDIR}/{S}/*.fa) \
                --sjdbGTFfile $(ls -t {REFDIR}/{S}/*.gtf) \
                --sjdbGTFfeatureExon exon

                pigz -p {threads} $(ls -t {REFDIR}/{S}/*.fa)
                pigz -p {threads} $(ls -t {REFDIR}/{S}/*.gtf)
                """
            )

#############################################
## Trimming and FastQC
#############################################

# Merge .fastq files (in case more than one sesquencing run was performed)
rule merge_fastqs:
    output:
        MERGED_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1.fq.gz'),
        MERGED_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz')
    params:
        TMP_DIR = '{OUTDIR}/{sample}/tmp',
        R1_FQ = lambda wildcards: R1_FQS[wildcards.sample],
        R2_FQ = lambda wildcards: R2_FQS[wildcards.sample]
    threads:
        config['CORES_LO']
    run:
        if len(params.R1_FQ.split(" "))==1 & len(params.R2_FQ.split(" "))==1: # shell for single fastq input
            shell("cp {params.R1_FQ} {output.MERGED_R1_FQ}")
            shell("cp {params.R2_FQ} {output.MERGED_R2_FQ}")
        else: # shell enablinging multi-fast input; concatenate inputs
            print("Concatenating",len(params.R1_FQ.split(" ")), ".fastq's for", wildcards.sample)
            shell("mkdir -p {params.TMP_DIR}")
            shell("zcat {params.R1_FQ} > {params.TMP_DIR}/{wildcards.sample}_R1.fq")
            shell("zcat {params.R2_FQ} > {params.TMP_DIR}/{wildcards.sample}_R2.fq")
            shell("pigz -p {threads} {params.TMP_DIR}/*.fq")

rule preTrim_FastQC_R2:
    input:
        MERGED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}/preTrim_fastqc_R2_out'),
        # fastqcReport = ''
    threads:
        config['CORES_LO']
        # min([config['CORES_LO'],8]) # 8 core max based on recommendations from trim_galore authors
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.MERGED_R2_FQ}
        """

# TSO & polyA trimming
rule trimPolyA_R2:
    input:
        MERGED_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1.fq.gz',
        MERGED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz'
    output:
        A_TRIMMED_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1_Atrimmed.fq.gz'),
        A_TRIMMED_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2_Atrimmed.fq.gz'),
        POLYA_REPORT = '{OUTDIR}/{sample}/cutadapt_polyA_report.txt'
    params:
        THREE_PRIME_R2_POLYA = "A"*100,
        FIVE_PRIME_R2 = "CCCATGTACTCTGCGTTGATACCACTGCTT" #10x TSO sequence
    threads:
        config['CORES_LO']
    log:
        '{OUTDIR}/{sample}/cutadapt_polyA_report.txt'
    shell:
        """
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYA} \
        -G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
        -o {output.A_TRIMMED_R1_FQ} \
        -p {output.A_TRIMMED_R2_FQ} \
        --cores {threads} \
        {input.MERGED_R1_FQ} {input.MERGED_R2_FQ} 1> {log}
        """

#Additional trimming step, for 2-color Illumina chemistries (NextSeq, etc.)
rule trimPolyG_R2:
    input:
        A_TRIMMED_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_Atrimmed.fq.gz',
        A_TRIMMED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_Atrimmed.fq.gz'
    output:
        FINAL_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz'),
        FINAL_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'),
        POLYG_REPORT = '{OUTDIR}/{sample}/cutadapt_polyG_report.txt'
    params:
        THREE_PRIME_R2_POLYG = "G"*100,
        FIVE_PRIME_R2 = "AAGCAGTGGTATCAACGCAGAGTACATGGG" # rev-comp of 10x TSO sequence
    threads:
        config['CORES_LO']
        # min([config['CORES_LO'],8]) # 8 core max based on recommendations from trim_galore authors
    log:
        log = '{OUTDIR}/{sample}/cutadapt_polyG_report.txt'
    shell:
        """
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYG} \
        -G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
        -o {output.FINAL_R1_FQ} \
        -p {output.FINAL_R2_FQ} \
        --cores {threads} \
        {input.A_TRIMMED_R1_FQ} {input.A_TRIMMED_R2_FQ} 1> {log.log}
        """

rule postTrim_FastQC_R2:
    input:
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}/postTrim_fastqc_R2_out')
        # fastqcReport = ''
    threads:
        min([config['CORES_LO'],8]) # 8 core max
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.FINAL_R2_FQ}
        """

#############################################
## Alignment
#############################################
# Make output directory, align fastqs, and generate raw/filtered feature/cell-barcode matrices
#   Info for STARsolo command line paramaters: https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md

rule STARsolo_align:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],#TODO- make chemistry-specific
        FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz',
        REF_LIST = expand('{REFDIR}/{SPECIES}/STAR_REF_FILE_NAME', REFDIR=REFDIR, SPECIES=SPECIES) # Reference genomes
    output:
        SORTEDBAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam', #TODO: add temp()
        UNMAPPED1 = '{OUTDIR}/{sample}/Unmapped.out.mate1',
        UNMAPPED2 = '{OUTDIR}/{sample}/Unmapped.out.mate2',
        # GENE = directory('{OUTDIR}/{sample}/Solo.out/Gene'),
        # GENEFULL = directory('{OUTDIR}/{sample}/Solo.out/GeneFull'),
        # VEL = directory('{OUTDIR}/{sample}/Solo.out/Velocyto'),
        GENEMAT = '{OUTDIR}/{sample}/Solo.out/Gene/raw/matrix.mtx.gz',
        GENEFULLMAT = '{OUTDIR}/{sample}/Solo.out/GeneFull/raw/matrix.mtx.gz',
        VELMAT = '{OUTDIR}/{sample}/Solo.out/Velocyto/raw/spliced.mtx.gz'
    params:
        CHEMISTRY = lambda wildcards: \
            META.loc[[wildcards.sample in srr_id for srr_id in META['SRR.accession']],'file.format'].values[0],
        OUTDIR = config['OUTDIR'],
        STAR_EXEC = config['STAR_EXEC'],
        # STAR_REF = config['STAR_REF'],#TODO-species-specific!
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    threads:
        config['CORES_LO']
    run: #*NOTE* ``--soloBarcodeReadLength 0` should be removed to ensure read-length checking on BC read (R1) is performed
        # Chemistry-specific alignment w/ STARsolo
        if params.CHEMISTRY == "3p_v2":
            shell(
                """
                mkdir -p {params.OUTDIR}/{wildcards.sample}

                {params.STAR_EXEC} \
                --runThreadN {threads} \
                --outFileNamePrefix {params.OUTDIR}/{wildcards.sample}/ \
                --outSAMtype BAM SortedByCoordinate \
                --outSAMattributes NH HI nM AS CR UR CB UB GX GN sS sQ sM \
                --readFilesCommand zcat \
                --soloUMIlen {params.UMIlen} \
                --genomeDir {params.REF_LIST} \
                --genomeLoad LoadAndKeep \
                --limitBAMsortRAM={params.MEMLIMIT} \
                --readFilesIn {input.FINAL_R2_FQ} {input.FINAL_R1_FQ} \
                --clipAdapterType CellRanger4 \
                --outReadsUnmapped Fastx \
                --outFilterMultimapNmax 50 \
                --soloType CB_UMI_Simple \
                --soloCBwhitelist {input.CB_WHITELIST} \
                --soloCellFilter EmptyDrops_CR \
                --soloFeatures Gene GeneFull Velocyto \
                --soloMultiMappers EM
                """
                )
        elif params.CHEMISTRY == "3p_v3":
            #TODO- check
            shell(
                """
                mkdir -p {params.OUTDIR}/{wildcards.sample}

                {params.STAR_EXEC} \
                --runThreadN {threads} \
                --outFileNamePrefix {params.OUTDIR}/{wildcards.sample}/ \
                --outSAMtype BAM SortedByCoordinate \
                --outSAMattributes NH HI nM AS CR UR CB UB GX GN sS sQ sM \
                --readFilesCommand zcat \
                --soloUMIlen {params.UMIlen} \
                --genomeDir {params.STAR_REF} \
                --genomeLoad LoadAndKeep \
                --limitBAMsortRAM={params.MEMLIMIT} \
                --readFilesIn {input.FINAL_R2_FQ} {input.FINAL_R1_FQ} \
                --clipAdapterType CellRanger4 \
                --outReadsUnmapped Fastx \
                --outFilterMultimapNmax 50 \
                --soloUMIlen 12 \
                --soloType CB_UMI_Simple \
                --soloCBwhitelist {input.CB_WHITELIST} \
                --soloCellFilter EmptyDrops_CR \
                --soloFeatures Gene GeneFull Velocyto \
                --soloMultiMappers EM
                """
                )
        elif params.CHEMISTRY == "3p_v3.1":
            #TODO- write...
            print("Havent written cmd for v3.1 yet!")
        # compress outputs
        # shell(
        #     """
        #     gzip -qf {output.GENE}/raw/*
        #     gzip -qf {output.GENE}/filtered/*
        #
        #     gzip -qf {output.GENEFULL}/raw/*
        #     gzip -qf {output.GENEFULL}/filtered/*
        #
        #     gzip -qf {output.VEL}/raw/*
        #     gzip -qf {output.VEL}/filtered/*
        #     """
        # )

# Index the .bam produced by STAR
rule indexSortedBAM:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam'
    output:
        BAI = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam.bai'
    threads:
        config['CORES_LO']
    shell:
        """
        samtools index -@ {threads} {input.SORTEDBAM}
        """


# Remove reads that don't have a corrected spot/cell barcode with samtools, then remove duplicates w/ **umi-tools**
## High mem usage? Check here! https://umi-tools.readthedocs.io/en/latest/faq.html
## **WARNING** this step is suuuupppppeeerrrr sloowwww. Don't run it if you don't need to!
rule umitools_dedupBAM:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        SORTEDBAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam'
    output:
        DEDUPBAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.dedup.out.bam',
        TMPBAM = temp('{OUTDIR}/{sample}/tmp.bam')
    params:
        OUTPUT_PREFIX='{OUTDIR}/{sample}/umitools_dedup/{sample}',
        # TMPBAM = '{OUTDIR}/{sample}/tmp.bam'
    threads:
        config['CORES_LO']
        #1
    log:
        '{OUTDIR}/{sample}/umitools_dedup/dedup.log'
    shell:
        """
        samtools view -1 -b \
        -@ {threads} \
        --tag-file CB:{input.CB_WHITELIST} \
        {input.SORTEDBAM} \
        > {output.TMPBAM}

        samtools index \
        -@ {threads} \
        {output.TMPBAM}

        umi_tools dedup \
        -I {output.TMPBAM} \
        --extract-umi-method=tag \
        --umi-tag=UB \
        --cell-tag=CB \
        --method=unique \
        --per-cell \
        --unmapped-reads=discard \
        --output-stats={params.OUTPUT_PREFIX} \
        --log {log} \
        -S {output.DEDUPBAM}
        """

rule umitools_indexDedupBAM:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.dedup.out.bam'
    output:
        BAI = '{OUTDIR}/{sample}/Aligned.sortedByCoord.dedup.out.bam.bai'
    threads:
        config['CORES_LO']
    shell:
        """
        samtools index -@ {threads} {input.SORTEDBAM}
        """

#############################################
## QC on STAR outputs
#############################################

## qualimap on aligned reads
rule qualimapQC:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam'
    output:
        qualimapDir = directory('{OUTDIR}/{sample}/qualimap_out'),
        fastqcReport = '{OUTDIR}/{sample}/qualimap_out/qualimapReport.html'
    params:
        # GENES_GTF = config['GENES_GTF'] #TODO Pull from downloaded gget files
    threads:
        1
        # config['CORES_LO']
    shell:
        """
        mkdir -p {output.qualimapDir}
        cd {output.qualimapDir}

        qualimap rnaseq \
        -bam {input.SORTEDBAM} \
        -gtf {params.GENES_GTF} \
        --sequencing-protocol strand-specific-forward \
        --sorted \
        --java-mem-size=6G \
        -outdir {output.qualimapDir} \
        -outformat html
        """

#############################################
## Unmapped read analyses
#############################################

# Compress and run fastqc on unmapped reads; switch names because of STAR weirdness
rule unmapped_fastqc:
    input:
        UNMAPPED1 = '{OUTDIR}/{sample}/Unmapped.out.mate1',
        UNMAPPED2 = '{OUTDIR}/{sample}/Unmapped.out.mate2'
    output:
        UNMAPPED1_FQ = '{OUTDIR}/{sample}/Unmapped.out.mate1.fastq.gz',
        UNMAPPED2_FQ = '{OUTDIR}/{sample}/Unmapped.out.mate2.fastq.gz',
        FQC_DIR = directory('{OUTDIR}/{sample}/Unmapped_fastqc_out')
    params:
        FASTQC_EXEC = config['FASTQC_EXEC']
    threads:
        config['CORES_LO']
    shell:
        """
        mv {input.UNMAPPED1} {input.UNMAPPED2}.fastq
        mv {input.UNMAPPED2} {input.UNMAPPED1}.fastq

        pigz -p{threads} {input.UNMAPPED1}.fastq {input.UNMAPPED2}.fastq

        mkdir -p {output.FQC_DIR}

        {params.FASTQC_EXEC} -o {output.FQC_DIR} -t {threads} {output.UNMAPPED1_FQ} {output.UNMAPPED2_FQ}
        """
