########################################################################################################
# align_snake
#   Snakemake workflow to  download fastq files and associated metadata from SRA, then use STARsolo to align and quantify 10x Chromium datasets, and finally perform simple preprocessing so that data are ready for downstream analysis
#   Written by David W. McKellar
########################################################################################################
import pandas as pd
from itertools import chain
from functools import reduce
from os import path, remove, rename

########################################################################################################
# Config files
########################################################################################################
configfile:"config.yaml"

CHEMISTRY_SHEET = pd.read_csv(config["CHEMISTRY_SHEET"], na_filter=False,index_col=0)#"resources/chemistry_sheet.csv"

########################################################################################################
# Executables
########################################################################################################
FFQ_EXEC = config["FFQ_EXEC"]
PREFETCH_EXEC = config["PREFETCH_EXEC"]
FQD_EXEC = config["FQD_EXEC"]
BAM2FQ_EXEC = config["BAM2FQ_EXEC"]

STAR_EXEC = config["STAR_EXEC"]
GGET_EXEC = config["GGET_EXEC"]
FASTQC_EXEC = config["FASTQC_EXEC"]
# TRIMGALORE_EXEC = config["TRIMGALORE_EXEC"]
CUTADAPT_EXEC = config["CUTADAPT_EXEC"]
SAMTOOLS_EXEC = config["SAMTOOLS_EXEC"]
UMITOOLS_EXEC = config["UMITOOLS_EXEC"]
QUALIMAP_EXEC = config["QUALIMAP_EXEC"]
MULTIQC_EXEC = config["MULTIQC_EXEC"]

########################################################################################################
# Directories
########################################################################################################
PRODIR = config["PRODIR"]
METADIR = config["METADIR"]
TMPDIR = config["TMPDIR"] # temporary files
DATADIR = config["DATADIR"] # outputs for STAR alignment, etc
REFDIR = config["REFDIR"] # Output for reference genomes

shell("mkdir -p {PRODIR}")
shell("mkdir -p {TMPDIR}")
shell("mkdir -p {METADIR}")
shell("mkdir -p {DATADIR}")
shell("mkdir -p {REFDIR}")

########################################################################################################
# Metadata
########################################################################################################
META = pd.read_csv(config["SAMPLE_SHEET"], na_filter=False)#sep="\t",encoding = "utf-8"

META = META[list(META["include"])] #remove undesired samples ("include"==False)
META = META[list(META["file.format"]!="ERR")] #remove samples with file format issues
# META = META[list(META["file.format"]!="bam")] #remove samples with file format issues

## Tissue filtering
META = META[list(META["tissue"]=="muscle")]
# META = META[[x in ["muscle", "tendon","limb", "ligament", "cartilage", "heart"] for x in META["tissue"]]] # ,
META = META[list(META["tissue"]!="")]

## Species filtering
# META = META[list(META["species"]=="Ciona intestinalis")]
META = META[[x in ["Homo sapiens", "Mus musculus", "Danio rerio"] for x in META["species"]]]

META = META[list(META["GSM.accession"]!="NA")]
META = META[list(META["GSM.accession"]!="")]

META = META[[x in ["3p_v2", "3p_v3", "3p_v3.1", "5p_v1"] for x in META["chemistry"]]]

# META = META.iloc[1:40,:] # subset to only download certain SRRs...

########################################################################################################
# Pre-snake metadata prep
########################################################################################################
# Get list of SRR IDs for fastq downloading
SRR_LIST = list(META["SRR.accession"])
for i in range(0,len(SRR_LIST)):
    SRR_LIST[i] = SRR_LIST[i].split(";")
SRR_LIST = list(chain(*SRR_LIST))

# Grab SRR IDs and their associated fastqs
SAMPLES = META["GSM.accession"].unique()

# Build dictionary of SRR IDs/fastq files
#TODO: add non-SRA sample functionality
R1_FQs = {}
R2_FQs = {}
for GSM in SAMPLES:
    TMP_SRR = META["SRR.accession"][list(META["GSM.accession"]==GSM)].values[0]
    TMP_SRR = TMP_SRR.split(";")
    R1_FQs[GSM] = [DATADIR+"/fastqs/"+ID+"_R1.fastq.gz" for ID in TMP_SRR]
    R2_FQs[GSM] = [DATADIR+"/fastqs/"+ID+"_R2.fastq.gz" for ID in TMP_SRR]

# Build dictionaries of chemistries & species to use for alignment
CHEM_DICT = {}
FORMAT_DICT = {}
SPECIES_DICT = {}
for i in range(0,META.shape[0]):
    tmp_gsm = list(META["GSM.accession"])[i]
    CHEM_DICT[tmp_gsm] = list(META["chemistry"])[i]
    FORMAT_DICT[tmp_gsm] = list(META["file.format"])[i]

    SPECIES_DICT[tmp_gsm] = list(META["species"])[i]
    SPECIES_DICT[tmp_gsm] = SPECIES_DICT[tmp_gsm].lower().replace(" ", "_")

########################################################################################################
# Reference genome info
########################################################################################################
SPECIES = list(META["species"]) #all lowercase and underscores (no spaces!)
SPECIES = [x.lower() for x in SPECIES]
SPECIES = [x.replace(" ", "_") for x in SPECIES]
SPECIES = pd.unique(SPECIES)

########################################################################################################
# Snakemake
########################################################################################################
rule all:
    input:
        # expand("{DATADIR}/align_out/{sample}/Aligned.sortedByCoord.dedup.out.bam.bai", DATADIR=config["DATADIR"], sample=SAMPLES), # umi_tools deduplicated .bam **Note** this is super slow!! Only uncomment if NEEDED
        expand("{DATADIR}/align_out/{sample}/STARsolo/Unmapped.out.mate2.fastq.gz", DATADIR=config["DATADIR"], sample=SAMPLES), # compress unmapped reads
        expand("{DATADIR}/align_out/{sample}/STARsolo/Solo.out/Gene/filtered/matrix.mtx.gz", DATADIR=config["DATADIR"], sample=SAMPLES), # compressed count matrices

        # expand("{DATADIR}/align_out/{sample}/STARsolo/Aligned.sortedByCoord.out.bam.bai", DATADIR=config["DATADIR"], sample=SAMPLES), # index non-dedup .bam
        # expand("{DATADIR}/align_out/{sample}/qualimap_out/qualimapReport.html", DATADIR=config["DATADIR"], sample=SAMPLES), # alignment QC with qualimap)

        # expand("{DATADIR}/align_out/{sample}/Unmapped_fastqc_out", DATADIR=config["DATADIR"], sample=SAMPLES), #fastQC results for unmapped reads
        # expand("{DATADIR}/align_out/{sample}/Solo.out/Gene/filtered/matrix.mtx.gz", DATADIR=config["DATADIR"], sample=SAMPLES), # count mats

        expand("{DATADIR}/align_out/{sample}/preTrim_fastqc_R2_out", DATADIR=config["DATADIR"], sample=SAMPLES), # raw R2 fastQC results
        expand("{DATADIR}/align_out/{sample}/postTrim_fastqc_R2_out", DATADIR=config["DATADIR"], sample=SAMPLES), # adapter/polyA/ployG-trimmed R2 fastQC results

        expand("{REFDIR}/{SPECIES}/STAR/SAindex", REFDIR=REFDIR, SPECIES=SPECIES), # Reference genomes
        expand("{METADIR}/{SRR}.json", METADIR=config["METADIR"], SRR=SRR_LIST), # metadata files
        expand("{METADIR}/merged_metadata.csv", METADIR=config["METADIR"])

        # expand("{DATADIR}/fastqs/{SRR}_{READ}.fastq.gz", DATADIR=config["DATADIR"], SRR=SRR_LIST, READ=["R1", "R2"]) # fastqs

# Metadata wrangling, aggregation
include: "rules/get_metadata.smk"

# Downloading, aggregating, and QCing raw read data
include: "rules/get_fqs.smk"
include: "rules/merge_fqs.smk"
include: "rules/trimQC.smk"

# Alignment, post-alignment clean-up, and QC with STARsolo
include: "rules/build_ref.smk"
include: "rules/star_align.smk"
include: "rules/dedup.smk"
include: "rules/star_unmapped.smk"
include: "rules/qualimap.smk"

# Counts preprocessing
include: "rules/soupx.smk"
# include: "rules/scanpy_init.smk"
# include: "rules/scanpy_QCfilter.smk"

# Final QC
# include: "rules/multiqc.smk"
